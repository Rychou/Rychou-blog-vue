{"meta":{"title":"Rychou'blog","subtitle":"Knowledge & Life things!","description":null,"author":"Rychou","url":"http://www.rychou.xyz"},"pages":[{"title":"Rychou","date":"2017-10-20T11:45:51.000Z","updated":"2017-10-20T11:54:15.676Z","comments":true,"path":"about/index.html","permalink":"http://www.rychou.xyz/about/index.html","excerpt":"","text":"未来的Web开发工程师 目前是一个大二的菜鸟 QQ:974393900 Email:rychou160423@163.com Github:https://github.com/xxxsimons"},{"title":"tags","date":"2017-10-18T15:54:36.000Z","updated":"2017-10-18T15:55:18.118Z","comments":false,"path":"tags/index.html","permalink":"http://www.rychou.xyz/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"发布你的第一个npm包！","slug":"2017-12-6","date":"2017-12-06T12:23:28.000Z","updated":"2017-12-06T15:38:32.345Z","comments":true,"path":"2017/12/06/2017-12-6/","link":"","permalink":"http://www.rychou.xyz/2017/12/06/2017-12-6/","excerpt":"1. 新建代码库 比如用的是github，那么在github上面创一个库，库的名字用你想发布的npm包名就好了。 2. clone到本地 3. 在本地库运行npm init 按照提示依次输入信息，如果有不想输入的话直接回车就好了。最终生成的package.json文件内容如下：","text":"1. 新建代码库 比如用的是github，那么在github上面创一个库，库的名字用你想发布的npm包名就好了。 2. clone到本地 3. 在本地库运行npm init 按照提示依次输入信息，如果有不想输入的话直接回车就好了。最终生成的package.json文件内容如下： { &quot;name&quot;: &quot;rycou-test&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;description&quot;: &quot;a test&quot;, &quot;main&quot;: &quot;index.js&quot;, &quot;scripts&quot;: { &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot; }, &quot;repository&quot;: { &quot;type&quot;: &quot;git&quot;, &quot;url&quot;: &quot;https://git.coding.net/rychouuuu/test-npm-install.git&quot; }, &quot;keywords&quot;: [ &quot;test&quot; ], &quot;author&quot;: &quot;rychou&quot;, &quot;license&quot;: &quot;ISC&quot; } 这里还需要一个入口文件，我这里用的是默认的index.js。在本地库里面新建文件index.js,内容如下： exports.showMsg = function () { console.log(&quot;This is my first module&quot;); }; 然后把本地库git push到远程库。 4. 发布npm包 4.1 首先要在官网注册一个账号,npm注册4.2 如果是第一次登陆的话，要在本地运行npm login，登陆一下。 $npm login Username: (你注册的时候的Username) Email: (你的注册邮箱) 4.3 运行npm publish发布包，发布之后去官网(npm)搜一下你的包是否发布成功。 发布过程中你可能会遇到错误： error 1： 使用cnpm的报错处理方法： 换回npm的镜像 npm config set registry http://registry.npmjs.org //发布之后改回淘宝镜像就好了 npm config set registry https://registry.npm.taobao.org error 2: 邮箱未认证处理方法： 去官网登陆后，会弹出一个是否发送邮箱的认证，点击发邮箱去自己的邮箱点击链接认证，然后再发布就好了 其他错误： 遇到其他错误的话，google查一下。 5. 用自己刚刚发布的包 5.1 在本地新建一个空目录，然后 npm install (你发布的包名) 5.2 新建index.js，内容： var test = require(&#39;你的包名&#39;); test.showMsg(); 5.3 node index.js 5.4 运行结果： This is my first module 恭喜你成功了","categories":[],"tags":[{"name":"npm","slug":"npm","permalink":"http://www.rychou.xyz/tags/npm/"}]},{"title":"C++中的引用转化为C语言的指针","slug":"2017-11-27","date":"2017-11-27T13:02:49.000Z","updated":"2017-11-29T15:07:23.279Z","comments":true,"path":"2017/11/27/2017-11-27/","link":"","permalink":"http://www.rychou.xyz/2017/11/27/2017-11-27/","excerpt":"C++中引用符号&amp;转化为C语言的指针*的方法最近在写数据结构上机作业时，在网上借鉴(抄)其他人的源代码时，发现有些C语言代码中夹杂着C++的代码，比如这个C++的引用符&amp;就让我很头疼，因为C中没有引用这个概念。其实在C++中是可以完美运行的，但是我又不想在C++里运行，就想怎样让其在C中运行呢。经过百般努力，终于成功了。","text":"C++中引用符号&amp;转化为C语言的指针*的方法最近在写数据结构上机作业时，在网上借鉴(抄)其他人的源代码时，发现有些C语言代码中夹杂着C++的代码，比如这个C++的引用符&amp;就让我很头疼，因为C中没有引用这个概念。其实在C++中是可以完美运行的，但是我又不想在C++里运行，就想怎样让其在C中运行呢。经过百般努力，终于成功了。 typedef struct{ Triple data[MAXSIZE+1]; int rpos[MAXRC+1]; int mu,nu,tu; }RLSMatrix; Status InitSMatrix(RLSMatrix &amp;M,RLSMatrix &amp;N){ int p; for(p=1;p&lt;=M-&gt;tu;p++){ printf(&quot;输入行号：&quot;); scanf(&quot;%d&quot;,&amp;M.data[p].i); printf(&quot;输入列号：&quot;); scanf(&quot;%d&quot;,&amp;M.data[p].j); printf(&quot;输入元素值：&quot;); scanf(&quot;%d&quot;,&amp;M.data[p].e); } ..... } void main(){ RLSMatrix M N; InitSMatrix(M,N); } 上面这段是在C++里的代码，&amp;指的是引用。这代码在C中是跑不起来的，接下来我们做一些改动，让它在C语言跑起来 typedef struct{ Triple data[MAXSIZE+1]; int rpos[MAXRC+1]; int mu,nu,tu; }RLSMatrix; Status InitSMatrix(RLSMatrix *M,RLSMatrix *N){//&amp;换为* int p; for(p=1;p&lt;=M-&gt;tu;p++){ printf(&quot;输入行号：&quot;); scanf(&quot;%d&quot;,&amp;M-&gt;data[p].i);//.换成-&gt; printf(&quot;输入列号：&quot;); scanf(&quot;%d&quot;,&amp;M-&gt;data[p].j);//.换成-&gt; printf(&quot;输入元素值：&quot;); scanf(&quot;%d&quot;,&amp;M-&gt;data[p].e);//.换成-&gt; } ..... } void main(){ RLSMatrix M N; InitSMatrix(&amp;M,&amp;N);//对M,N取址&amp; } 这样我们的代码就可以在C中完美运行啦！！！","categories":[],"tags":[{"name":"C++ C","slug":"C-C","permalink":"http://www.rychou.xyz/tags/C-C/"}]},{"title":"学习React的心理路程","slug":"React-Study","date":"2017-11-15T13:52:16.000Z","updated":"2017-11-15T14:06:59.498Z","comments":true,"path":"2017/11/15/React-Study/","link":"","permalink":"http://www.rychou.xyz/2017/11/15/React-Study/","excerpt":"","text":"教程链接 React视频教程,密码：8dwj React中文文档 一个网友写的比较好的教程 心路历程一开始直接看老师发过来的一些电子书，看到前面一两章已经初步了解到React的强大，但是不能自己动手实践做一些demo感觉还是很虚，单纯看书也记不住。所以就自己找了一些网课的教程，其中一个就是文章开头贴上去的视频教程。视频里面有5个部分左右吧，每个部分都是直接动手写demo，并且边写边给你解释。刚开始我就是照着视频里的demo一点点写下来（切忌复制黏贴源码，虽然感觉看懂了，但是记忆不深刻），慢慢的就入门了。遇到问题再去网上找，查文档。总结下来我学习的过程就是：看视频—&gt;写视频里的demo—&gt;遇到不懂的问题，网上搜、查文档 最后的建议个人感觉入门一个语言不应该直接硬着头皮去看文档，应该直接动手写demo，写的过程中肯定会遇到很多问题，当你想方设法解决了这些问题之后，自然而然就入门了。(●’◡’●)加油！！！","categories":[],"tags":[]},{"title":"Js中splice()于slice()的区别","slug":"Javascript","date":"2017-11-06T15:48:33.000Z","updated":"2017-11-29T15:07:01.571Z","comments":true,"path":"2017/11/06/Javascript/","link":"","permalink":"http://www.rychou.xyz/2017/11/06/Javascript/","excerpt":"splice() 方法与 slice() 方法的作用是不同的，splice() 方法会直接对数组进行修改,可以删除元素，也可以插入元素。而slice()是返回已有数组中的选定元素，可以截取字符串。","text":"splice() 方法与 slice() 方法的作用是不同的，splice() 方法会直接对数组进行修改,可以删除元素，也可以插入元素。而slice()是返回已有数组中的选定元素，可以截取字符串。 splice()语法array.splice(start) array.splice(start, deleteCount) array.splice(start, deleteCount, item1, item2, ...) 示例 var myFish = [&quot;angel&quot;, &quot;clown&quot;, &quot;mandarin&quot;, &quot;surgeon&quot;]; //从第 2 位开始删除 0 个元素，插入 &quot;drum&quot; var removed = myFish.splice(2, 0, &quot;drum&quot;); //运算后的 myFish:[&quot;angel&quot;, &quot;clown&quot;, &quot;drum&quot;, &quot;mandarin&quot;, &quot;surgeon&quot;] //被删除元素数组：[]，没有元素被删除 //从第 3 位开始删除 1 个元素 removed = myFish.splice(3, 1); //运算后的myFish：[&quot;angel&quot;, &quot;clown&quot;, &quot;drum&quot;, &quot;surgeon&quot;] //被删除元素数组：[&quot;mandarin&quot;] //从第 2 位开始删除 1 个元素，然后插入 &quot;trumpet&quot; removed = myFish.splice(2, 1, &quot;trumpet&quot;); //运算后的myFish: [&quot;angel&quot;, &quot;clown&quot;, &quot;trumpet&quot;, &quot;surgeon&quot;] //被删除元素数组：[&quot;drum&quot;] //从第 0 位开始删除 2 个元素，然后插入 &quot;parrot&quot;, &quot;anemone&quot; 和 &quot;blue&quot; removed = myFish.splice(0, 2, &quot;parrot&quot;, &quot;anemone&quot;, &quot;blue&quot;); //运算后的myFish：[&quot;parrot&quot;, &quot;anemone&quot;, &quot;blue&quot;, &quot;trumpet&quot;, &quot;surgeon&quot;] //被删除元素的数组：[&quot;angel&quot;, &quot;clown&quot;] //从第 3 位开始删除 2 个元素 removed = myFish.splice(3, Number.MAX_VALUE); //运算后的myFish: [&quot;parrot&quot;, &quot;anemone&quot;, &quot;blue&quot;] //被删除元素的数组：[&quot;trumpet&quot;, &quot;surgeon&quot;] slice()语法array.slice(start, end) 示例 在数组中读取元素： var fruits = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Lemon&quot;, &quot;Apple&quot;, &quot;Mango&quot;]; var citrus = fruits.slice(1,3); 输出： Orange,Lemon 截取字符串 var str=&quot;www.runoob.com!&quot;; document.write(str.slice(4)+&quot;&lt;br&gt;&quot;); // 从第 5 个字符开始截取到末尾 document.write(str.slice(4,10)); // 从第 5 个字符开始截取到第10个字符","categories":[],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"http://www.rychou.xyz/tags/Javascript/"}]},{"title":"给页面添加一个密码验证","slug":"给页面添加一个密码验证","date":"2017-10-18T16:05:29.000Z","updated":"2017-11-29T15:06:32.101Z","comments":true,"path":"2017/10/19/给页面添加一个密码验证/","link":"","permalink":"http://www.rychou.xyz/2017/10/19/给页面添加一个密码验证/","excerpt":"文章的密码验证今天写博客的时候想着要些一些日记之类的博客的话，如果没有密码验证那就不叫日记了，所以在网上找了一下方法，下面是我根据别人的改进的js代码,加在文章中可以实现密码验证","text":"文章的密码验证今天写博客的时候想着要些一些日记之类的博客的话，如果没有密码验证那就不叫日记了，所以在网上找了一下方法，下面是我根据别人的改进的js代码,加在文章中可以实现密码验证直接附上源码 &lt;script&gt; while(1){ if(&quot;123456&quot;==prompt(&quot;请输入密码！(123456)&quot;)) { break; } else { alert(&quot;输入错误&quot;); } } &lt;/script&gt; 注意事项： 使用时将该段代码放到文章开头，否则就会不起效果。什么意思呢？看下面图片就知道了。 看到了吧，如果放在文章末尾的话，就会先加载js代码前面的部分，也就是文章内容，所以说，为了防止这种情况发生，得把js代码放在文章开头 不过这个代码还是不完善的，比如说如果你的主题主页不是单纯的列表页的话，那么你在主页就会出现这个密码验证。所以说不完善，博主还在想办法完善中。不过我朋友找到一个插件可以设置密码，下面是我朋友的博客文章https://bababadboy.github.io/2017/10/18/AES%E5%8A%A0%E5%AF%86hexo%E6%96%87%E7%AB%A0/ while(1){ if(\"123456\"==prompt(\"请输入密码！(123456)\")) { break; } else { alert(\"输入错误\"); } }","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://www.rychou.xyz/tags/hexo/"}]},{"title":"hexo建站的坑","slug":"hexo建站的坑","date":"2017-10-18T15:14:05.000Z","updated":"2017-11-29T15:07:12.748Z","comments":true,"path":"2017/10/18/hexo建站的坑/","link":"","permalink":"http://www.rychou.xyz/2017/10/18/hexo建站的坑/","excerpt":"Hexo的安装与使用这是我的第一篇博客，刚开始想弄jekyll的，但是弄了很久也没配置好，干脆直接弄hexo了。接下来讲讲我弄hexo的遇到的一些问题吧。这是一个我看到的一个比较好的教程","text":"Hexo的安装与使用这是我的第一篇博客，刚开始想弄jekyll的，但是弄了很久也没配置好，干脆直接弄hexo了。接下来讲讲我弄hexo的遇到的一些问题吧。这是一个我看到的一个比较好的教程大家在配置好后，在本地运行一般没有问题，但是在推到Github上去的时候， $ hexo deploy Error：Deployer not found: git 我就遇到了这里出错的问题，在网上看了解决办法发现只需要在你的Blog的根目录下运行一下代码 npm install hexo-deployer-git --save 然后再 $ hexo generate $ hexo deploy 然后everything is ok！","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://www.rychou.xyz/tags/hexo/"}]}]}